enum Type {
	ACCOUNT
	ZONE
	RECORD
	DISTRIBUTION
	ORIGIN
	ELASTICBEANSTALK
}

type Account {
	accountID: ID!
	zones: [Zone!]!
	zone(id: ID!): Zone!
	records: [Record!]!
	distributions: [Distribution!]!
}

type Zone {
	zoneID: ID! 
	name: String!
	serviceType: String!
	records: [Record!]!
	record(id: ID!): Record!
}

type Record {
	recordID: ID!
	recordType: String!
	values: [Value!]!
	alias: Boolean!
}

type Value {
	valueID: ID!
}

type Distribution {
	distributionID: ID!
	domain: String!
	origins: [Origin!]!
	originGroups: [OriginGroup!]!
}

type Origin {
	originID: ID!
	domain: String!
}

type OriginGroup {
	groupID: ID!
	origins: [Value!]!
}

type ElasticbeanstalkEnvironment {
	 environmentID: ID!
	 environmentName: String!
	 applicationName: String!
	 environmentURL: String!
	 cname: String!
	 region: String!
}

type HijackableResource {
	id: ID!
	account: String!
	type: Type!
	value: Value!
}

type HijackableResourceChain {
	id: ID!
	resource: HijackableResource!
	upstream: [HijackableResource!]!
	downstream: [HijackableResource!]!
}

type Query {
	accounts: [Account!]!
	account(id: ID!): Account!
	
	zones: [Zone!]!
	zone(id: ID!): Zone!
	
	records: [Record!]!
	record(id: ID!): Record!
	pointedAtByRecords(domain: String!): [Record!]!

	
	values: [Value!]!
	value(id: ID!): Value!

	distributions: [Distribution!]!
	distribution(id: ID!): Distribution!
	pointedAtByDistribution(domain: String!): [Distribution!]!

	origins: [Origin!]!
	origin(id: ID!): Origin
	pointedAtByOrigin(domain: String!): [Origin!]!

	originGroups: [OriginGroup!]!
	pointedAtByOriginGroup(domain: String!): [OriginGroup!]!

	elasticbeanstalkEnvironments: [ElasticbeanstalkEnvironment!]!
	elasticbeanstalkByEndpoint(endpoint: String!): ElasticbeanstalkEnvironment!
	getElasticbeanstalkUpstreamHijack(endpoints: [String!]!): [HijackableResource!]!

	hijackChainByDomain(id: ID!, domains: [String!]!, type: Type!): HijackableResourceChain!
	
}